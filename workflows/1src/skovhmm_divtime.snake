import sys
sys.path.insert(0, './')

import numpy as np
from utils.utils import *


configfile: "config/snakemake/config.yaml"

skovhmm_exec_filter = config["skovhmm_exec_filter"]
skovhmm_exec_train = config["skovhmm_exec_train"]
skovhmm_exec_decode = config["skovhmm_exec_decode"]
skovhmm_exec_env = config["skovhmm_exec_env"]

output_dir = config["output_dir"]
replicates = config["replicates"]

np.random.seed(config["seed"])

seed_list = np.random.random_integers(1,2**31,replicates)
demo_model_list = config["1src_demo_models"]
cutoff_list = [0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 0.99, 0.999]
nref_list = [10, 50, 100]
ntgt_list = [1]

divtime_list = [2000, 5000, 10000]


rule all:
    input:
        output_dir + "inference/SkovHMM/skovhmm_1src_accuracy_divtime.txt",


rule process_vcf:
    input:
        vcf = output_dir + "simulated_data/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/divtime_{divtime}/sim1src.biallelic.vcf.gz",
        outgroup_file = "config/SkovHMM/{demog}/sim.{nref}.outgroup.ids",
    output:
        outgroup_freq = output_dir + "inference/SkovHMM/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/divtime_{divtime}/sim.outgroup.freq",
        tgt_count = output_dir + "inference/SkovHMM/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/divtime_{divtime}/sim.tgt.count",
    params:
        tgt_ind_id = lambda wildcards: "tsk_" + wildcards.nref,
    resources: time_min=3000, mem_mb=10000, cpus=1,
    threads: 1,
    shell:
        """
        vcftools --gzvcf {input.vcf} --counts --stdout --keep {input.outgroup_file} --min-alleles 2 --max-alleles 2 > {output.outgroup_freq}
        vcftools --gzvcf {input.vcf} --indv {params.tgt_ind_id} --stdout --counts --min-alleles 2 --max-alleles 2 > {output.tgt_count}
        """


rule skovhmm_run:
    input:
        outgroup_freq = rules.process_vcf.output.outgroup_freq,
        tgt_count = rules.process_vcf.output.tgt_count,
        weights = "config/SkovHMM/{demog}/sim.weights.txt",
        mut_rates = "config/SkovHMM/{demog}/sim.mutrates.txt",
        init_prob = "config/SkovHMM/{demog}/sim.initialization.hmm",
    output:
        prob = output_dir + "inference/SkovHMM/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/divtime_{divtime}/sim.decoded.All_posterior_probs.txt",
        summary = output_dir + "inference/SkovHMM/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/divtime_{divtime}/sim.decoded.Summary.txt",
    params:
        skovhmm_exec_filter = config["skovhmm_exec_filter"],
        skovhmm_exec_train = config["skovhmm_exec_train"],
        skovhmm_exec_decode = config["skovhmm_exec_decode"],
        observations = output_dir + "inference/SkovHMM/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/divtime_{divtime}/sim.observations",
        train_output_prefix = output_dir + "inference/SkovHMM/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/divtime_{divtime}/sim.trained",
        decode_output_prefix = output_dir + "inference/SkovHMM/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/divtime_{divtime}/sim.decoded",
        window_size = 1000,
    conda: skovhmm_exec_env,
    resources: time_min=3000, mem_mb=10000, cpus=1,
    threads: 1,
    shell:
        """
        cat {input.tgt_count} | python {params.skovhmm_exec_filter} {input.outgroup_freq} {params.window_size} {input.weights} {params.observations}
        python {params.skovhmm_exec_train} {params.observations} {params.train_output_prefix} {input.init_prob} {input.weights} {input.mut_rates}
        python {params.skovhmm_exec_decode} {params.observations} {params.decode_output_prefix} {params.train_output_prefix}.hmm {input.weights} {input.mut_rates} {params.window_size}
        """


rule skovhmm_process_output:
    input: 
        decoded_probs = rules.skovhmm_run.output.prob,
        true_tracts = output_dir + "simulated_data/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/divtime_{divtime}/sim1src.introgressed.tracts.bed",
    output: 
        output_dir + "inference/SkovHMM/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/divtime_{divtime}/skovhmm.out.cutoff.0.accuracy",
        output_dir + "inference/SkovHMM/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/divtime_{divtime}/skovhmm.out.cutoff.0.05.accuracy",
        output_dir + "inference/SkovHMM/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/divtime_{divtime}/skovhmm.out.cutoff.0.1.accuracy",
        output_dir + "inference/SkovHMM/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/divtime_{divtime}/skovhmm.out.cutoff.0.15.accuracy",
        output_dir + "inference/SkovHMM/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/divtime_{divtime}/skovhmm.out.cutoff.0.2.accuracy",
        output_dir + "inference/SkovHMM/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/divtime_{divtime}/skovhmm.out.cutoff.0.25.accuracy",
        output_dir + "inference/SkovHMM/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/divtime_{divtime}/skovhmm.out.cutoff.0.3.accuracy",
        output_dir + "inference/SkovHMM/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/divtime_{divtime}/skovhmm.out.cutoff.0.35.accuracy",
        output_dir + "inference/SkovHMM/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/divtime_{divtime}/skovhmm.out.cutoff.0.4.accuracy",
        output_dir + "inference/SkovHMM/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/divtime_{divtime}/skovhmm.out.cutoff.0.45.accuracy",
        output_dir + "inference/SkovHMM/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/divtime_{divtime}/skovhmm.out.cutoff.0.5.accuracy",
        output_dir + "inference/SkovHMM/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/divtime_{divtime}/skovhmm.out.cutoff.0.55.accuracy",
        output_dir + "inference/SkovHMM/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/divtime_{divtime}/skovhmm.out.cutoff.0.6.accuracy",
        output_dir + "inference/SkovHMM/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/divtime_{divtime}/skovhmm.out.cutoff.0.65.accuracy",
        output_dir + "inference/SkovHMM/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/divtime_{divtime}/skovhmm.out.cutoff.0.7.accuracy",
        output_dir + "inference/SkovHMM/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/divtime_{divtime}/skovhmm.out.cutoff.0.75.accuracy",
        output_dir + "inference/SkovHMM/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/divtime_{divtime}/skovhmm.out.cutoff.0.8.accuracy",
        output_dir + "inference/SkovHMM/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/divtime_{divtime}/skovhmm.out.cutoff.0.85.accuracy",
        output_dir + "inference/SkovHMM/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/divtime_{divtime}/skovhmm.out.cutoff.0.9.accuracy",
        output_dir + "inference/SkovHMM/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/divtime_{divtime}/skovhmm.out.cutoff.0.95.accuracy",
        output_dir + "inference/SkovHMM/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/divtime_{divtime}/skovhmm.out.cutoff.0.99.accuracy",
        output_dir + "inference/SkovHMM/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/divtime_{divtime}/skovhmm.out.cutoff.0.999.accuracy",
    params:
        win_len = 1000,
        src_id = 'Archaic',
        cutoffs = cutoff_list,
        inferred_tracts = output_dir + "inference/SkovHMM/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/divtime_{divtime}/skovhmm.out.cutoff",
    resources: time_min=3000, mem_mb=10000, cpus=1,
    threads: 1,
    run:
        for i in range(len(params.cutoffs)):
            cutoff = params.cutoffs[i]
            inferred_tracts = f'{params.inferred_tracts}.{cutoff}.bed'
            process_skovhmm_output(input.decoded_probs, inferred_tracts, float(cutoff), int(params.win_len), params.src_id)
            precision, recall = cal_accuracy(input.true_tracts, inferred_tracts)
            with open(output[i], 'w') as o:
                o.write(f'{wildcards.demog}\tnref_{wildcards.nref}_ntgt_{wildcards.ntgt}\t{wildcards.divtime}\t{cutoff}\t{precision}\t{recall}\n')


rule accuracy_summary:
    input:
        accuracy_files = expand(output_dir + "inference/SkovHMM/{demog}/nref_{nref}/ntgt_{ntgt}/{seed}/divtime_{divtime}/skovhmm.out.cutoff.{cutoff}.accuracy",
                                demog=demo_model_list, nref=nref_list, ntgt=ntgt_list, seed=seed_list, divtime=divtime_list, cutoff=cutoff_list),
    output:
        accuracy_table = output_dir + "inference/SkovHMM/skovhmm_1src_accuracy_divtime.txt",
    resources: time_min=3000, mem_mb=10000, cpus=1,
    threads: 1,
    shell:
        """
        cat {input.accuracy_files} | sed '1idemography\\tsample\\tdivergence_time\\tcutoff\\tprecision\\trecall' > {output.accuracy_table}
        """
